import{w as g,d as y}from"./i7_vV6_l.js";import{c as w,d as f,e as m,f as S,g as l,s as i,u as n,S as h,E as d}from"./C2fzWeZh.js";class T{constructor(s=w){this.baseURL=s,this.timeout=f,this.maxRetries=m}async _request(s,t={}){if(!navigator.onLine)throw new Error("OFFLINE");const a=new AbortController,r=setTimeout(()=>a.abort(),this.timeout);for(let e=0;e<this.maxRetries;e++)try{const o=await fetch(this.baseURL+s,{...t,signal:a.signal,headers:{...t.headers}});if(clearTimeout(r),!o.ok){const p=await o.json().catch(()=>({}));throw new Error(p.detail||`HTTP ${o.status}`)}return await o.json()}catch(o){if(clearTimeout(r),o.name==="AbortError")throw new Error("TIMEOUT");if(o.message==="OFFLINE"||e===this.maxRetries-1)throw o;await S(1e3*Math.pow(2,e))}}async capture(s){return this._request("/api/capture",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})}async captureVoice(s){const t=new FormData;return t.append("audio",s,"recording.webm"),this._request("/api/capture/voice",{method:"POST",body:t})}async getTimeline(s={}){const t=new URLSearchParams(s);return this._request(`/api/timeline?${t}`)}async getTypeDistribution(){return this._request("/api/stats/type-distribution")}async getTags(){return this._request("/api/stats/tags")}async getRecentActivity(s=7){return this._request(`/api/stats/recent-activity?days=${s}`)}async search(s){const t=new URLSearchParams({q:s});return this._request(`/api/search?${t}`)}async health(){return this._request("/api/health")}async getDashboardStats(){try{const[s,t,a]=await Promise.all([this.getTypeDistribution(),this.getTags(),this.getRecentActivity()]);return{typeDistribution:s,tags:t,recentActivity:a}}catch(s){throw console.error("Failed to fetch dashboard stats:",s),s}}}const c=new T;function E(){const{subscribe:u,set:s,update:t}=g({captures:[],loading:!1,error:null});return{subscribe:u,async capture(a){if(!a||a.trim()===""){n.showToast("请输入内容","error");return}t(r=>({...r,loading:!0,error:null}));try{const r=await c.capture({content:a});return t(e=>({...e,loading:!1,captures:[r,...e.captures]})),n.showToast(h.CAPTURE_SAVED,"success"),r}catch(r){if(console.error("Capture error:",r),r.message==="OFFLINE")try{return await l.addCapture({content:a,type:"text"}),t(e=>({...e,loading:!1})),n.showToast(d.OFFLINE,"warning"),i.incrementPending(),{offline:!0}}catch(e){throw console.error("Failed to save offline:",e),t(o=>({...o,loading:!1,error:e.message})),n.showToast("保存失败","error"),e}throw t(e=>({...e,loading:!1,error:r.message})),n.showToast(d.API_ERROR,"error"),r}},async captureVoice(a){t(r=>({...r,loading:!0,error:null}));try{const r=await c.captureVoice(a);return t(e=>({...e,loading:!1,captures:[r,...e.captures]})),n.showToast(h.VOICE_CAPTURED,"success"),r}catch(r){throw console.error("Voice capture error:",r),t(e=>({...e,loading:!1,error:r.message})),n.showToast("语音转录失败","error"),r}},async syncOfflineCaptures(){try{const a=await l.getUnsyncedCaptures();if(a.length===0)return;i.setSyncing(!0);for(const r of a)try{await c.capture({content:r.content}),await l.markAsSynced(r.id),i.decrementPending()}catch(e){console.error("Failed to sync capture:",r.id,e)}i.setSyncing(!1),i.updateLastSyncTime(),n.showToast(h.SYNC_COMPLETE,"success")}catch(a){console.error("Sync error:",a),i.setSyncing(!1)}},async loadCaptures(a=50){t(r=>({...r,loading:!0}));try{const r=await c.getTimeline({limit:a});t(e=>({...e,loading:!1,captures:r}))}catch(r){console.error("Failed to load from API:",r);try{const e=await l.getAllCaptures(a);t(o=>({...o,loading:!1,captures:e}))}catch(e){console.error("Failed to load from IndexedDB:",e),t(o=>({...o,loading:!1,error:e.message}))}}},async search(a){if(!a||a.trim()==="")return[];try{return await c.search(a)}catch(r){return console.error("Search error:",r),[]}},clear(){s({captures:[],loading:!1,error:null})}}}const b=E();y(b,u=>u.captures.length);export{b as captureStore};
